#include <WiFi.h>         // Use <ESP8266WiFi.h> for ESP8266
#include <HTTPClient.h>   // To send HTTP requests

// Wi-Fi Credentials
const char* ssid = "YOUR_WIFI_SSID";
const char* password = "YOUR_WIFI_PASSWORD";

// Server to send data (Change this to your server or mobile app API)
const char* serverUrl = "http://192.168.1.100:3000/update-count"; // Local Server IP

// AI Camera Variables
int peopleCount = 0;
#define CAMERA_PIN 34  // Define the GPIO pin reading AI Camera output

void setup() {
    Serial.begin(115200);  // Start Serial Monitor
    WiFi.begin(ssid, password);
    
    // Wait for connection
    Serial.print("Connecting to WiFi...");
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("\nConnected to WiFi");
}

void loop() {
    // Read AI Camera Data (Assuming digital signal output)
    int sensorValue = digitalRead(CAMERA_PIN);
    
    // Simulated Logic: AI camera counts people based on signal HIGH/LOW
    if (sensorValue == HIGH) {
        peopleCount++;  // Increment count if camera detects movement
        sendPeopleCount(peopleCount);
    }

    delay(5000);  // Send data every 5 seconds
}

// Function to send people count to the phone app/server
void sendPeopleCount(int count) {
    if (WiFi.status() == WL_CONNECTED) {
        HTTPClient http;
        http.begin(serverUrl);
        http.addHeader("Content-Type", "application/json");

        // JSON Payload
        String payload = "{\"count\":" + String(count) + "}";
        int httpResponseCode = http.POST(payload);

        if (httpResponseCode > 0) {
            Serial.println("Data sent successfully: " + String(httpResponseCode));
        } else {
            Serial.println("Error sending data: " + String(httpResponseCode));
        }

        http.end(); // Close connection
    } else {
        Serial.println("WiFi Disconnected. Reconnecting...");
        WiFi.begin(ssid, password);
    }
}
